"""
Django settings for animals project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-gx(z)-g!w_u&*wvwtbxg5$rfmp%v&#0xc3jyqk*a9*63h)g@00"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin", 
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",

    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    "corsheaders",
    "django_vite",

    'siteapp.apps.SiteappConfig', 
    
    'djoser', # Djoser
]
MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "animals.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "animals.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'siteapp.password_validators.CustomUserAttributeSimilarityValidator',
    },
    {
        'NAME': 'siteapp.password_validators.CustomMinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'siteapp.password_validators.CustomCommonPasswordValidator',
    },
    {
        'NAME': 'siteapp.password_validators.CustomNumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'
TIME_ZONE = 'Europe/Moscow'
USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_ROOT = os.path.normpath(os.path.join(BASE_DIR, "staticfiles"))
STATIC_URL = "/static/"

DJANGO_VITE = {
    "default": {
        "dev_mode": True
    }
}

STATICFILES_DIRS = [
    BASE_DIR / "assets",
    BASE_DIR / "public",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


AUTH_USER_MODEL = 'siteapp.User'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticatedOrReadOnly', # По умолчанию только чтение для анонимов
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10, # Можете изменить или убрать, если пагинация настраивается отдельно для каждого View
}
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://localhost:8000", # django server itself counts as CROS by browser
    "http://127.0.0.1:8000", # django server itself counts as CROS by browser
    "http://127.0.0.1:5173",
]

FRONTEND_BASE_URL = os.getenv('FRONTEND_BASE_URL', 'http://localhost:5173' + STATIC_URL)

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Время жизни Access токена
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Время жизни Refresh токена
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True, # Обновлять last_login пользователя

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Используйте ваш SECRET_KEY
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,

    'AUTH_HEADER_TYPES': ('Bearer',), # Тип заголовка авторизации
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Не используется, если ROTATE_REFRESH_TOKENS=False
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Не используется
}

# Djoser
DJOSER = {
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}', # URL для фронтенда
    'USERNAME_RESET_CONFIRM_URL': '#/username/reset/confirm/{uid}/{token}', # URL для фронтенда
    'ACTIVATION_URL': '#/activate/{uid}/{token}', # URL для фронтенда
    'SEND_ACTIVATION_EMAIL': False,  # Установите True, если настроили email-бэкенд
    'SEND_CONFIRMATION_EMAIL': False, # Установите True, если настроили email-бэкенд
    'USERNAME_CHANGED_EMAIL_CONFIRMATION': False, # Если используется смена username
    'PASSWORD_CHANGED_EMAIL_CONFIRMATION': False,
    'USER_CREATE_PASSWORD_RETYPE': True, # Требовать повторный ввод пароля при регистрации
    'SET_PASSWORD_RETYPE': True,
    'PASSWORD_RESET_CONFIRM_RETYPE': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True, # Разлогинивать при смене пароля
    'SERIALIZERS': {
        'user_create': 'siteapp.serializers.UserCreateSerializer', # Кастомный сериализатор для регистрации
        'user': 'siteapp.serializers.CurrentUserSerializer',          # Кастомный сериализатор для /users/me/
        'current_user': 'siteapp.serializers.CurrentUserSerializer',
        # 'user_delete': 'djoser.serializers.UserDeleteSerializer',
    },
    'PERMISSIONS': { # Если нужны более строгие разрешения
        # 'activation': ['rest_framework.permissions.AllowAny'],
        # 'password_reset': ['rest_framework.permissions.AllowAny'],
        # 'password_reset_confirm': ['rest_framework.permissions.AllowAny'],
        # 'set_password': ['djoser.permissions.CurrentUserOrAdmin'],
        # 'username_reset': ['rest_framework.permissions.AllowAny'],
        # 'username_reset_confirm': ['rest_framework.permissions.AllowAny'],
        # 'set_username': ['djoser.permissions.CurrentUserOrAdmin'],
        # 'user_create': ['rest_framework.permissions.AllowAny'],
        # 'user_delete': ['djoser.permissions.CurrentUserOrAdmin'],
        # 'user': ['djoser.permissions.CurrentUserOrAdmin'], # Только для /users/me/
        # 'user_list': ['rest_framework.permissions.IsAdminUser'], # Только админ может видеть список всех пользователей
        # 'token_create': ['rest_framework.permissions.AllowAny'],
        # 'token_destroy': ['rest_framework.permissions.IsAuthenticated'],
    },
    'LOGIN_FIELD': 'email', # Используем email для логина
    'HIDE_USERS': True, # Не показывать список всех пользователей по /users/ (если не переопределено в PERMISSIONS)
    'EMAIL': {
        # 'activation': 'djoser.email.ActivationEmail',
        # 'confirmation': 'djoser.email.ConfirmationEmail',
        # 'password_reset': 'djoser.email.PasswordResetEmail',
        # 'password_changed_confirmation': 'djoser.email.PasswordChangedConfirmationEmail',
        # 'username_changed_confirmation': 'djoser.email.UsernameChangedConfirmationEmail',
        # 'username_reset': 'djoser.email.UsernameResetEmail',
    }
}